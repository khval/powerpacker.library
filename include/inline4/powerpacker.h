#ifndef INLINE4_POWERPACKER_H
#define INLINE4_POWERPACKER_H

/*
** This file was auto generated by idltool 53.24.
**
** It provides compatibility to OS3 style library
** calls by substituting functions.
**
** Do not edit manually.
*/ 

#ifndef EXEC_TYPES_H
#include <exec/types.h>
#endif
#ifndef EXEC_EXEC_H
#include <exec/exec.h>
#endif
#ifndef EXEC_INTERFACES_H
#include <exec/interfaces.h>
#endif

#ifndef LIBRARIES_POWERPACKER_H
#include <libraries/powerpacker.h>
#endif
#include <interfaces/powerpacker.h>

/* Inline macros for Interface "main" */
#define ppLoadData__legacy__(filename, col, memtype, bufferptr, lenptr, funcptr) IPowerPacker->ppLoadData__legacy__((filename), (col), (memtype), (bufferptr), (lenptr), (funcptr))
#define ppDecrunchBuffer(endcrun, decrbuff, effptr, col) IPowerPacker->ppDecrunchBuffer((endcrun), (decrbuff), (effptr), (col))
#define ppCalcChecksum(string) IPowerPacker->ppCalcChecksum((string))
#define ppCalcPasskey(string) IPowerPacker->ppCalcPasskey((string))
#define ppDecrypt(buffer, len, key) IPowerPacker->ppDecrypt((buffer), (len), (key))
#define ppGetPassword(screen, buffer, maxchars, checksum) IPowerPacker->ppGetPassword((screen), (buffer), (maxchars), (checksum))
#define ppAllocCrunchInfo(eff, speedup, func, userdata) IPowerPacker->ppAllocCrunchInfo((eff), (speedup), (func), (userdata))
#define ppFreeCrunchInfo(crunchinfo) IPowerPacker->ppFreeCrunchInfo((crunchinfo))
#define ppCrunchBuffer(crunchinfo, buffer, length) IPowerPacker->ppCrunchBuffer((crunchinfo), (buffer), (length))
#define ppWriteDataHeader(lock, eff, crypt, checksum) IPowerPacker->ppWriteDataHeader((lock), (eff), (crypt), (checksum))
#define ppEnterPassword(screen, buffer) IPowerPacker->ppEnterPassword((screen), (buffer))
#define ppErrorMessage(error) IPowerPacker->ppErrorMessage((error))
#define ppCrunchBufferDest(crunchinfo, buffer, dest, len) IPowerPacker->ppCrunchBufferDest((crunchinfo), (buffer), (dest), (len))
#define ppLoadData2(filename, output_buffer, output_buffer_len, alloc_fn, free_fn, progress_fn) IPowerPacker->ppLoadData2((filename), (output_buffer), (output_buffer_len), (alloc_fn), (free_fn), (progress_fn))

#endif /* INLINE4_POWERPACKER_H */
